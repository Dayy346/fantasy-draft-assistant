datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Player {
  id        String   @id
  name      String
  position  String
  team      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seasons   Season[]
}

model Season {
  id           String   @id
  playerId     String
  year         Int
  games        Int
  att          Int?
  tgt          Int?
  rec          Int?
  rushYds      Float?
  recvYds      Float?
  totalTd      Int?
  fpts         Float?
  ppg          Float?
  touches      Int?
  ppt          Float?
  ypc          Float?
  ypr          Float?
  tpg          Float?
  oppg         Float?
  consistency  Float?
  snapShare    Float?

  // weighted/z/composite fields (denormalized for speed)
  ppgWeighted  Float?
  pptWeighted  Float?
  oppgWeighted Float?
  ypcWeighted  Float?
  draftScore   Float?
  vorp         Float?

  // Position-specific advanced metrics
  yprr         Float?  // Yards per route run (WR/TE)
  ypt          Float?  // Yards per target (WR/TE)
  adot         Float?  // Average depth of target (WR/TE)
  ypa          Float?  // Yards per attempt (QB)
  pass_td_rate Float?  // Pass TD rate (QB)
  int_rate     Float?  // Interception rate (QB)
  rushing_ppg_index Float? // Rushing PPG index (QB)

  // Weighted metrics for comprehensive scoring
  ppg_w        Float?
  ppt_w        Float?
  oppg_w       Float?
  ypc_w        Float?
  tpg_w        Float?
  yprr_w       Float?
  ypt_w        Float?
  adot_w       Float?
  ypa_w        Float?
  pass_td_rate_w Float?
  int_rate_w   Float?
  rushing_ppg_index_w Float?

  // rookies
  isRookie       Boolean? @default(false)
  draftRound     Int?
  draftPick      Int?
  collegeYdsPg   Float?
  combineSpeed   Float?
  rookieScore    Float?
  rookiePpgProj  Float?

  Player       Player   @relation(fields: [playerId], references: [id])
}
